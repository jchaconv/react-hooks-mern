
Instalaciones necesarias:
https://gist.github.com/Klerith/4a4abfd88a88b2d1f16efd95fea41362


*********************************
SECCION 2 : Introducción a React
*********************************

Se creó 01-intro-react

Se agregó:
https://gist.github.com/Klerith/b0111f52ba16451d095f38d4c995605b

así de sencillo se tiene un app con react

Babel permite que React use código de js y es compatible para todos los browsers

Ir al engranaje de la consola y marcar "selected context only"

undefined.length => es un error crítico, para evitarlo:
resApi.personajes?.length

**********************************************
SECCION 3 : Introducción a Javascript Moderno
**********************************************

-Bash en /d/cursos-udemy/react-hooks-mern:
npx create-react-app intro-javascript
-renombrar a 02-intro-javascript y llevar a bash:
npm start

const => no cambian
let => variable

****

template string:
`` => en mi teclado sale con Alt Gr + tecla a la izq de enter y arriba de shift
con backticks puedo llamar variables y funciones

****

Objetos literales:

const persona = {
    nombre: 'Julio',
    apellido: 'Chacon',
    edad: 101,
    direccion: {
        ciudad: 'Lima',
        zip: 2002,
        lat: 14.23332,
        lng: 23.56211
    }
};

si quiero hacer una copia del objeto debo usar el operador spread
para no hacer solo una copia de la referencia en memoria:

const persona2 = { ...persona };


****

Arreglos:

También se usa spread:
let arreglo2 = [...arreglo, 5]

la función map crea un nuevo arreglo y ejecuta una función

****

Funciones:

Poner los parentesis para retornar un objeto:
const getUser = () => ({
    uid: 'ABC256',
    username: 'chearee'
})

****

Desestructuración de obj y arr:

para hacerlo con obj anidados:
const { nombreClave, anios, latlng } = retornaPersona4( persona );
const {lat, lng } = latlng;

****

Import, export y funciones comunes de arreglos

https://gist.github.com/Klerith/4aeb99d31aedbc29ff4d54bbb77d2d7f

abrir y cambiar de pestaña, escribir el nombre del obj y se importará autom

https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find


Cuando la export es default no necesita llaves:

export const owners = ['DC', 'Marvel'];
export default heroes;

import heroes, {owners} from "./data/heroes";

Otra manera de exportar:

const owners = ['DC', 'Marvel'];

export {
    heroes as default,
    owners
}

****

Promesas

al resolve() se le pueden enviar valores y luego se llama con then()
de la misma manera pasa con reject() y catch()

para que una función pueda tener el then() y catch() es necesario que retornen
una promesa


****

Fetch API

Se vieron promesas encadenadas
y manejo de json retornado por un api

****

Async - Await

Cuando se agrega async el retorno de la función se convierte en una Promesa
por cada Promise como response se agrega un await
poner todo dentro de un try-catch

****

Operador Ternario

Dos maneras de usarlo, la última es para el if corto

const activo = true;

//const mensaje = ( activo ) ? 'Activo' : 'Inactivo';
const mensaje = ( activo ) && 'Activo';


***********************************
SECCION 4 : Primeros pasos en React
***********************************

-cmd(interactivo) en /d/cursos-udemy/react-hooks-mern:
npm install -g yarn
yarn create vite
name: counter-app
seleccionar react -> js -> cambiar nombre a la carpeta
entrar a la ruta de la carpeta y ejecutar: yarn install

regresar a la carpeta padre y ejecutar:
npx create-react-app counter-app

ver diferencias entre proyectos

ejecutar: yarn dev

rafc para crear componentes


********

Comunicación entre Props

desde la pestaña Components de la consola de chrome puedo probar las props
puse title: "Hola" y enter, se ve el cambio

para poner props por defecto en caso llegue vacío:
export const FirstApp = ({ title = 'Hola soy Julio', subtitle, code }) ...

para enviar un número:
    <FirstApp
        title="Hola, soy Goku"
        subtitle={123}
        code={456}
    />

********

PropTypes: FirstApp.jsx

yarn add prop-types

Sirven para especificar las props del componente y sus tipos de datos

para enviar un boolean solo es necesario enviar el nombre del propType:
<FirstApp title />

Para definirlas se pone al final:

FirstApp.propTypes = {
    title: PropTypes.string.isRequired,
    subtitle: PropTypes.number.isRequired,
    code: PropTypes.number
}

********

DefaultProps : FirstApp.jsx

para enviar valores por defecto y son tomados antes que las propTypes

FirstApp.defaultProps = {
    title: 'No hay titulo',
    subtitle: 'No hay subtitulo',
    username: 'Julio Chacon',
    code: 240588
}

********

Hook - useState :: CounterApp.jsx

const [counter, setCounter ] = useState(value);

value viene del componente padre

si queremos modificar ese valor hay que llamar a setCounter()

setCounter( counter + 1 );

también se puede escribir así:

setCounter( (c) => c + 1 );

Cada vez que hay un cambio en el estado el componente se vuelve a ejecutar,
lo comprobamos poniendo un log al comienzo:
console.log('RENDER');

Programar ordenandamente es clave porque si hubiera una invocación a un api
se estaría ejecutando una y otra vez

**************************************
SECCION 6 : GifExpertApp - Aplicacion
**************************************

ir a carpeta principal:
yarn create vite
name: gif-expert-app

entrar a la carpeta del proyecto:
yarn install
yarn dev

estilos css:
https://gist.github.com/Klerith/e4fca6ac127ccb9abd1e8ad77fcd52f1
ponerlos de manera global importando en el main

Cuando se hace un recorrido de arreglo se debe proporcionar un "key" prop unico
categories.map( category => {
    return <li key={ category }>{category}</li>
})

Se pone event.preventDefault(); en el onSubmit del form para evitar que recargue
el navegador


********

Hooks - useEffect

para evitar que react redibuje el componente una y otra vez
se comento el Stricness para evitar un log de consola(solo afecta en desa no en prod)

para evitar que se ejecute una y otra vez getGifs:

este hook sirve para que cuando cambie el estado se ejecute un efecto secundario

useEffect( () => {

    getGifs(category);

}, [])

en el arreglo están las dependencias, así como está funcionó correctamente

********

customHook - useFetchGifs

crearlo con rafc ya que es un componente pero no retorna jsx sino un objeto
si las propiedas en el return tienen el mismo nombre(clave,valor) solo enviarlas así:
return {
    images,
    isLoading
}

********

Para mostrar jsx condicional:
{
    isLoading
    ? ( <h2>Cargando ...</h2> )
    : null
}

otra manera más corta:
{
    isLoading && ( <h2>Cargando ...</h2> )
}


********

********

********

********




