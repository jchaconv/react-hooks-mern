
Instalaciones necesarias:
https://gist.github.com/Klerith/4a4abfd88a88b2d1f16efd95fea41362


*********************************
SECCION 2 : Introducción a React
*********************************

Se creó 01-intro-react

Se agregó:
https://gist.github.com/Klerith/b0111f52ba16451d095f38d4c995605b

así de sencillo se tiene un app con react

Babel permite que React use código de js y es compatible para todos los browsers

Ir al engranaje de la consola y marcar "selected context only"

undefined.length => es un error crítico, para evitarlo:
resApi.personajes?.length

**********************************************
SECCION 3 : Introducción a Javascript Moderno
**********************************************

-Bash en /d/cursos-udemy/react-hooks-mern:
npx create-react-app intro-javascript
-renombrar a 02-intro-javascript y llevar a bash:
npm start

const => no cambian
let => variable

****

template string:
`` => en mi teclado sale con Alt Gr + tecla a la izq de enter y arriba de shift
con backticks puedo llamar variables y funciones

alt+96 para backticks ``

****

Objetos literales:

const persona = {
    nombre: 'Julio',
    apellido: 'Chacon',
    edad: 101,
    direccion: {
        ciudad: 'Lima',
        zip: 2002,
        lat: 14.23332,
        lng: 23.56211
    }
};

si quiero hacer una copia del objeto debo usar el operador spread
para no hacer solo una copia de la referencia en memoria:

const persona2 = { ...persona };


****

Arreglos:

También se usa spread:
let arreglo2 = [...arreglo, 5]

la función map crea un nuevo arreglo y ejecuta una función

****

Funciones:

Poner los parentesis para retornar un objeto:
const getUser = () => ({
    uid: 'ABC256',
    username: 'chearee'
})

****

Desestructuración de obj y arr:

para hacerlo con obj anidados:
const { nombreClave, anios, latlng } = retornaPersona4( persona );
const {lat, lng } = latlng;

****

Import, export y funciones comunes de arreglos

https://gist.github.com/Klerith/4aeb99d31aedbc29ff4d54bbb77d2d7f

abrir y cambiar de pestaña, escribir el nombre del obj y se importará autom

https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find


Cuando la export es default no necesita llaves:

export const owners = ['DC', 'Marvel'];
export default heroes;

import heroes, {owners} from "./data/heroes";

Otra manera de exportar:

const owners = ['DC', 'Marvel'];

export {
    heroes as default,
    owners
}

****

Promesas

al resolve() se le pueden enviar valores y luego se llama con then()
de la misma manera pasa con reject() y catch()

para que una función pueda tener el then() y catch() es necesario que retornen
una promesa


****

Fetch API

Se vieron promesas encadenadas
y manejo de json retornado por un api

****

Async - Await

Cuando se agrega async el retorno de la función se convierte en una Promesa
por cada Promise como response se agrega un await
poner todo dentro de un try-catch

****

Operador Ternario

Dos maneras de usarlo, la última es para el if corto

const activo = true;

//const mensaje = ( activo ) ? 'Activo' : 'Inactivo';
const mensaje = ( activo ) && 'Activo';


***********************************
SECCION 4 : Primeros pasos en React
***********************************

-cmd(interactivo) en /d/cursos-udemy/react-hooks-mern:
npm install -g yarn
yarn create vite
name: counter-app
seleccionar react -> js -> cambiar nombre a la carpeta
entrar a la ruta de la carpeta y ejecutar: yarn install

regresar a la carpeta padre y ejecutar:
npx create-react-app counter-app

ver diferencias entre proyectos

ejecutar: yarn dev

rafc para crear componentes


********

Comunicación entre Props

desde la pestaña Components de la consola de chrome puedo probar las props
puse title: "Hola" y enter, se ve el cambio

para poner props por defecto en caso llegue vacío:
export const FirstApp = ({ title = 'Hola soy Julio', subtitle, code }) ...

para enviar un número:
    <FirstApp
        title="Hola, soy Goku"
        subtitle={123}
        code={456}
    />

********

PropTypes: FirstApp.jsx

yarn add prop-types

Sirven para especificar las props del componente y sus tipos de datos

para enviar un boolean solo es necesario enviar el nombre del propType:
<FirstApp title />

Para definirlas se pone al final:

FirstApp.propTypes = {
    title: PropTypes.string.isRequired,
    subtitle: PropTypes.number.isRequired,
    code: PropTypes.number
}

********

DefaultProps : FirstApp.jsx

para enviar valores por defecto y son tomados antes que las propTypes

FirstApp.defaultProps = {
    title: 'No hay titulo',
    subtitle: 'No hay subtitulo',
    username: 'Julio Chacon',
    code: 240588
}

********

Hook - useState :: CounterApp.jsx

const [counter, setCounter ] = useState(value);

value viene del componente padre

si queremos modificar ese valor hay que llamar a setCounter()

setCounter( counter + 1 );

también se puede escribir así:

setCounter( (c) => c + 1 );

Cada vez que hay un cambio en el estado el componente se vuelve a ejecutar,
lo comprobamos poniendo un log al comienzo:
console.log('RENDER');

Programar ordenandamente es clave porque si hubiera una invocación a un api
se estaría ejecutando una y otra vez

**************************************
SECCION 6 : GifExpertApp - Aplicacion
**************************************

ir a carpeta principal:
yarn create vite
name: gif-expert-app

entrar a la carpeta del proyecto:
yarn install
yarn dev

estilos css:
https://gist.github.com/Klerith/e4fca6ac127ccb9abd1e8ad77fcd52f1
ponerlos de manera global importando en el main

Cuando se hace un recorrido de arreglo se debe proporcionar un "key" prop unico
categories.map( category => {
    return <li key={ category }>{category}</li>
})

Se pone event.preventDefault(); en el onSubmit del form para evitar que recargue
el navegador


********

Hooks - useEffect

para evitar que react redibuje el componente una y otra vez
se comento el Stricness para evitar un log de consola(solo afecta en desa no en prod)

para evitar que se ejecute una y otra vez getGifs:

este hook sirve para que cuando cambie el estado se ejecute un efecto secundario

useEffect( () => {

    getGifs(category);

}, [])

en el arreglo están las dependencias, así como está funcionó correctamente

********

customHook - useFetchGifs

crearlo con rafc ya que es un componente pero no retorna jsx sino un objeto
si las propiedas en el return tienen el mismo nombre(clave,valor) solo enviarlas así:
return {
    images,
    isLoading
}

********

Para mostrar jsx condicional:
{
    isLoading
    ? ( <h2>Cargando ...</h2> )
    : null
}

otra manera más corta:
{
    isLoading && ( <h2>Cargando ...</h2> )
}


******************************************
SECCION 9 : Profundizando hooks generales
******************************************


yarn create vite
name: hook-app
renombrar a 05-hook-app
yarn

borrar todo excepto el main.jsx y crear un index.css


se agregó bootstrap con esto en el index.html:
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">

********

useState :: CounterApp.jsx

este hook también puede almacenar el estado de un objeto

const [ state, setCounter] = useState({
        counter1: 10,
        counter2: 20,
        counter3: 30
});

si quiero cambiar el estado de algún counter con el setCounter debo 
especificar cada propiedad del objeto, para ello se recomienda usar spread

onClick={ () => setCounter({
    ...state,
    counter1: counter1 + 1
}) }

********

customHook - useCounter.js

puedo retornar valores y funciones para cambiar el estado:

return {
    counter,
    increment,
    decrement,
    reset,
}

puedo consumir así :: CounterWithCustomHook.jsx

const { counter, increment, decrement, reset } = useCounter();

Si se necesita enviar algún valor a las funciones del customHook se debe hacer así:
<button 
    onClick={ () => increment(2) }
>+1</button>

haciendo esto también se evita el object Object

********

useEffect :: SimpleForm.jsx

En esta función se recibe el event, al cual desestructuramos con {target}, asimismo
se obtiene {name, value} del target 
y está reconociendo el nombre del input que está cambiando y le setea el valor
con [name]: value

const onInputChange = ({ target }) => {
    const { name, value } = target;
    console.log(name, value);
    setFormState({
        ...formState,
        [ name ]: value
    });
}

en cuanto a las dependencias del hook, cuando solo se necesita que se ejecute la función
al levantar el componente por primera vez, se deja el arreglo vacío, así:
useEffect(() => {
    console.log('useEffect!');
}, []);

Se recomienda tener useEffect por cada estado que cambie, por ejemplo:
useEffect(() => {
    console.log('useEffect!');
}, []);

useEffect(() => {
    console.log('formState changed!');
}, [formState]);

useEffect(() => {
    console.log('email changed!');
}, [email]);


********

useEffect unmount - Cleanup :: Message.jsx

para ver la opción del retorno del useEffect
se usa cuando el componente se levanta y se destruye:

useEffect(() => {

    console.log('Message Mounted');

    return () => {
        console.log('Message Unmounted');
    }
}, [])

Es necesario hacer la limpieza en el return como en el ejemplo:
useEffect(() => {

    const onMouseMove = ({ x, y }) => {
        setCoords({ x, y});
    }
    
    window.addEventListener( 'mousemove', onMouseMove);

    return () => {
        window.removeEventListener( 'mousemove', onMouseMove);
    }
}, [])

********

customHook - useForm.js

Para hacer el componente genérico y poder invocar sus propiedades ahorrando una línea
para la Desestructuración. Se puede hacer lo siguiente:

Agregar ...formState y de esa manera estarán llegando todas las propiedades que tenga el formulario

return {
   ...formState,
   formState,
   onInputChange
}

En FormWithCustomHook.jsx:

const { formState, onInputChange, username, email, password } = useForm({
    username: '',
    email: '',
    password: ''
});

********

archivo de barril para reducir imports
se creó /hooks/index.js

export * from './useCounter';
export * from './useFetch';
export * from './useForm';

Las imports quedarían así:
import { useCounter, useFetch } from '../hooks';


********

hooks :: useRef => FocusScreen.jsx

Sirve para manipular un objeto en especifico utilizando su referencia
y de esa manera no se dibuja el componente otra vez

const inputRef = useRef();

const onClick = () => {
    inputRef.current.select();
}


********

funcion memo :: Memorize.jsx

Se ve que un componente hijo se crea otra vez cuando el padre tiene un cambio
en otro componente hijo. En este ejemplo se vio lo sgte:

<Memorize>
    <Small />

    <button {show}>

</Memorize>

Cuando había un cambio en el state show se disparaba también el Small
Para solucionar esto podemos usar la funcion memo de react.

Esta manera es poco usada pero sirve. Se debe englobar el código en paréntesis luego
de la palabra memo.

import { memo } from 'react';

export const Small = memo(({ value }) => {

    console.log('Small dibujando ...')

    return (
        <small>{ value }</small>
    )
})

Esta forma es más usual:

import React from 'react'

export const Small = React.memo(({ value }) => {

    console.log('Small dibujando ...')

    return (
        <small>{ value }</small>
    )
})

Así ya no se dispara el componente Small :)

********

hook - useMemo :: MemoHook.jsx

El hook guarda en memoria el valor de la función y solo se volverá a procesar
cuando haya un cambio en el arreglo de dependencias, en este caso "counter"

const memorizedValue = useMemo(() => heavyStuff(counter), [counter]);

<h4> { memorizedValue } </h4>

Al usar el hook ya no se muestra el log del heavyStuff

********

hook - useCallback :: CallbackHook.jsx

Cuando se envía una función a otro componente este no la puede memorizar así tenga 
React.memo porque cada vez que se crea apunta a un espacio de memoria distinto

Una vez agrego el sgte codigo:

const incrementFather = useCallback(
    () => {
        setCounter( (value) => value +1 );
    },
    [],
);

De esta manera queda memorizada incrementFather y ShowIncrement la puede reconocer como
la misma funcion inicial

Se usa así: setCounter( (value) => value +1 );
porque al mandarle el callback está tomando el valor inicial de una manera más forsoza y lo suma

Si se necesita mandar argumentos:

const incrementFather = useCallback(
    ( cinco ) => {
        setCounter( (value) => value + cinco );
    },
    [],
);


En ShowIncrement:
<button
    className='btn btn-primary'
    onClick={ () => {
        increment(5);
    }}
>


********************************************
SECCION 10 : Profundizando hooks useReducer
********************************************

Reducer:
es una funcion pura(sin efectos secundarios) y no puede ser async
no debe llamar a localStorage o sessionStorage
retorna un nuevo estado necesariamente
usualmente recibe dos args(initialState, accion(no debe requerir más de una))

Ejemplo:

const initialTodos = [{
    id: 1,
    todo: 'comprar yogurt',
    done: false
}];

const todoReducer = ( state = initialTodos, action) => {
    return state;
}

let todos = todoReducer();
console.log(todos); => esto retornaría el state inicial

La idea es tener en un solo lugar todas las acciones que cambian el state del app

intro-reducer.js

En el reducer definir la accion como {} por default para evitar errores
definir la accion y usar spread para retornar el state anterior más lo nuevo

también se puede declarar así:

export const todoReducer = ( initialState = [], action = {} ) => {
}

********

hooks - useReducer :: TodoApp.jsx

Para el caso de [TODO] Add Todo se está retornando el nuevo estado así:
return [ ...initialState, action.payload ]
el spread es para guardar lo que ya estaba y el
action.payload debería ser lo que se va a añadir

handleNewTodo => en esta función se crea un action {} y se envía al reducer
mediante el dispatch. Y solo con eso ya se puede ver el todo agregado en la lista.


TodoAdd.jsx
Aquí se tiene la lógica de como emitir un valor desde un form | formulario

********

localStorage en la pestaña application del navegador
para hacer persistente la info

para que los datos se guarden incluso cuando se recargue el navegador necesitamos
usar la tercera funcion del useReducer(todoReducer, initialState, init)

En TodoApp.jsx se definió la funcion init que retorna los todos y si no existen da un []

********

borrar un todo
se hizo la funcion handleDeleteTodo la cual viajó en onDeleteTodo
desde TodoApp->TodoList->TodoItem

marcar como completado || toggle :: TodoItem.jsx

className={`align-self-center ${ (todo.done) ? 'text-decoration-line-through' : '' }`}

********

custom hook :: useTodos.js

Se centralizó todo la lógica de TodoApp.jsx en el hook
se retornaron funciones y valores "sin declarar arriba"

return {
    todos,
    handleNewTodo,
    handleToggleTodo,
    handleDeleteTodo,
    todosCount: todos.length,
    pendingTodosCount: todos.filter( todo => !todo.done ).length
}



********************************************
SECCION 11 : Profundizando hooks useContext
********************************************

useContext: Para no pasar info de componentes "padres" a "nietos" o "bisnietos"
    la idea es centralizar la info y buscarla en ese contexto para no tenerla tan
    esparcida.
    También hay casos donde los componentes no se encuentran dentro de otros, ahí
    también es preciso usar el context(contenedor de info a nivel superior)

Temas:
*****

- Context
- Provider
- useContext
- React Router
- Links y NavLinks
- CreateContext
- SPA ( Single Page Application )

********

react-router-dom => https://reactrouter.com/en/main

yarn add react-router-dom@6

Se agregó BrowserRouter en el main (high order component)

import { BrowserRouter } from "react-router-dom";
  
  <BrowserRouter>
    <MainApp />
  </BrowserRouter>

Cuando se solicita un path que no existe podemos redirigir directamente así
usando el comodin:

<Route path="/*" element={ <LoginPage /> } />

El problema de hacerlo así es que redirecciona a LoginPage pero queda la url mal puesta,
por eso es mejor usar Navigate:

<Route path="/*" element={ <Navigate to="/about" />

De esta manera también cambia la url incorrecta a /about

********

Link:

Al usar esto:
<a href="/about">About</a>
Se hace un refresh de toda la página, mejor usar:
<Link to="/login">Login</Link>
de esa manera no recarga todo, solo lo necesario

los estilos aplicados a los anchortags(<a>) son reflejados en
Link porque en el dom es traducido como <a>

********

NavLink

Ayuda en la navegación. A diferencia de Link se le puede poner clases

Si se usa Navbar de bootstrap reducir el zoom del navegador para ver
todos los links!

El NavLink recibe args, el cual se desestructura para usar el campo isActive
y de esa manera ponerle el active en el css del mismo NavLink

********

CreateContext y ContextProvider

La idea es no hacer tanto traspaso de estados entre componentes y obtener data de un lugar
que lo tenga todo centralizado.

El Context(Higher Order Component) es el arbol de Componentes de la aplicación

El CreateContext debe tener un valor inicial, puede ser cualquier cosa, incluso vacío => context/UserContext.jsx

El ContextProvider se crea en otro archivo context/UserProvider y recibe children que son como los componentes hijos,
también se le agrega .Provider y dentro tiene todo lo que los componentes pueden obtener de este context

Para usarlo se debe ubicar el punto más alto de la aplicación donde se considere que los componentes hijos necesitarán la data,
en nuestro ejemplo es el MainApp. Se reemplaza el fragment por el UserProvider

Ir a Components en el browser y click en Context.Provider:
Se ve que están los children y también los values que le pasamos

Con datos en duro que luego fueron cambiados:

UserProvider.jsx:

import { UserContext } from "./UserContext"

const user = {
    id: 123,
    name: 'Julio Chacon',
    email: 'jchacon@email.com'
}

export const UserProvider = ({ children }) => {
    return (
        <UserContext.Provider value={{ user: user }}>
            { children }
        </UserContext.Provider>
    )
}

********

hooks: useContext

Para usar los valores almacenados en el context. Ver LoginPage.jsx

El llamado es muy simple:

const { user } = useContext(UserContext);

Como no lo quiero tener establecido por defecto en el Home, agrego esto '?':
<h1>HomePage <small>{ user?.name }</small></h1>

Se usó useState para modificar la info del usuario y que pueda tenerlo otro componente


*************************************************
SECCION 14 : HeroesApp - Single Page Application
*************************************************

Temas:

-SPA ( Single Page Application ) a profundidad
-Diferentes temas en la misma aplicación aplicados a diferentes rutas
-Multiples Routers
-Push y Replace en el History
-Leer argumentos por URL
-QueryParams
-Aplicar filtros utilizando QueryStrings

********

navegar | navegacion | navegación | rutas | ruteo

D:\cursos-udemy\react-hooks-mern> yarn create vite
name: heroes-app-spa

Cambiar nombre al directorio: 07-heroes-app-spa

D:\cursos-udemy\react-hooks-mern> cd 07-heroes-app-spa
D:\cursos-udemy\react-hooks-mern\07-heroes-app-spa> yarn install
D:\cursos-udemy\react-hooks-mern\07-heroes-app-spa> yarn dev

********

crear primer router

D:\cursos-udemy\react-hooks-mern\07-heroes-app-spa> yarn add react-router-dom@6

Se agregó BrowserRouter en el main.jsx

import { BrowserRouter } from "react-router-dom";
  
  <BrowserRouter>
    <HeroesApp />
  </BrowserRouter>

Se creó router/AppRouter.jsx donde están las rutas del app

********

colocar clase de la ruta activa =>  /ui/components/Navbar.jsx

Se pegó un gist para el Navbar.jsx
Se agregó un index.js como archivo de barril, pero tener en cuenta que si se usa a ese nivel
los componentes deben tener nombres distintos.

Usar esta línea:

<NavLink
className={({ isActive }) => `nav-item nav-link ${isActive ? 'active' : ''}`} 
to="/dc"
></NavLink>

Se crearon archivos de barril para tener exports e imports más ordenadas.
Luego ctrl+shift+p => sort lines ascending seleccionando las líneas
ordenar lineas | ascendente | alfabeticamente | alfabetico | alfabéticamente | alfabético
orden alfabetico | orden alfabético | ordenar alfabeticamente | ordenar alfabéticamente

Si solo pongo algo como esto:
export * from './routes';
Buscará el archivo index.js por defecto y si no lo encuentra
sale error en la aplicación.


********

Haciendo un segundo router
Se creó /heroes/routes/HeroesRoutes.jsx
Se agregaron los Routes correspondientes y se
quitaron de AppRouter.jsx(se dejó comentado)

Todo esto se realizó para que estando en /login
no se muestre el <Navbar />

********

Navigate push / replace - Custom Hooks useNavigate
(provisto en react-router-dom)

Navbar.jsx:

Se usó useNavigate() para direccionar a /login:

const navigate = useNavigate();

const onLogout = () => {
    navigate("/login");
}

pero si doy click en la flecha "atras" regresa a la
página donde estaba para solucionar eso se envía replace:

const onLogout = () => {
    navigate('/login', {
    replace: true
    });
}

El replace sirve para limpiar las rutas navegadas para que el usuario
no pueda regresar a la página anterior(de logout a la anterior)
No me funcionó!

********

Lista de heroes
Se usó un gist: https://gist.github.com/Klerith/934da045caae0fec3a1067d013926c46

Se creó heroes/helpers/getHeroesByPublisher.js
Para obtener heroes por publisher

Se creó heroes/components/HeroesList.jsx

********

HeroCard.jsx

por alguna razón cuando hago esto:
{
    heroes.map(hero => {
        return <HeroCard
        key={ hero.id }
        {...hero}
        />
    })
}

si o si necesita el return para regresar el contenido, en los videos no es así

retorno de propiedades | varias props | varias propiedades se realiza con
el operador spread :    ...hero
ya que son varias propiedades las que recibe el componente, no hace
falta especificar cada una.


<img src={ `/src/assets/heroes/${ id }.jpg` } className="card-img" alt="{ superhero }" /> :

-Tuve que realizar la importacion con esa url, no me funcionó con la del video
-Aquí se usa alt como texto alternativo si la imagen no existe


Para mostrar solo si characters es diferente al alter_ego:

{
    ( alter_ego !== characters ) && <p>{ characters }</p>
}

Hay otras formas, como crear una constante para el <p>:

const charactersByHero = (<p>{ characters }</p>);
Luego:
{
    alter_ego!==characters && charactersByHero
}


Otra forma es hacer un componente "privado":

const CharactersByHero = ({ characters, alter_ego }) => {
    if ( alter_ego == characters ) return (<></>);
    return ( <p>{ characters }</p> )
}

<CharactersByHero characters={ characters } alter_ego={ alter_ego} />

Si se quiere reducir aún más el código se puede usar ternario:

 ( alter_ego == characters )
    ? (<></>)
    : ( <p>{ characters }</p> )

********

Hacer paginas para los id's de los heroes

En HeroesRoutes.jsx:

<Route path="hero/:heroId" element={<HeroPage />} />

Se pone el comodin :heroId

HeroPage.jsx :

customHooks :: useParams() 

Viene de react-router-dom Sirve para obtener los parámetros de
la url o path

const params = useParams();
console.log(params);

{
    "*": "hero/batman",
    "heroId": "batman"
}

Se ve la prop heroId porque es la que se definió en el comodin del Route

Ahora al darle a mas info del heroe nos lleva al HeroPage y muestra en consola la info
del heroe. Si se cambia el valor de la url por algo inválido se muestra "undefined"


Para enviar a otra pagina si la url no existe se hizo esto momentaneamente:

if ( !hero ) {
    return <Navigate to="/marvel" />
}

Se usó:
navigate(-1);
Para regresar a la página anterior.

********

Se agregó useMemo:

HeroPage.jsx:
const hero = useMemo( () => getHeroById( heroId ), [ heroId] );

HeroesList.jsx:
const heroes = useMemo( () => getHeroesByPublisher(publisher), [ publisher ]);

Este hook recibe un callback y un arrego de dependencias.
Nos ayuda a que si no cambia la dependencia no vuelve a ejecutar el proceso pesado.

********

Agregando animaciones | animacion | animación

https://animate.style/

Se agregó en index.html:

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

En HeroCard.jsx y HeroPage.jsx 
se agregaron las clases de css

********

En SearchPage.jsx

https://github.com/Klerith/custom-hooks

Se usó el useForm con navigate para enviar a una página
con queryParam:

navigate(`?q=${ searchText }`);

El location obtenido con useLocation() de react-router-dom contiene esto:
Es dificil de leer el search
{
    "pathname": "/search",
    "search": "?q=batman&asc=true",
    "hash": "",
    "state": null,
    "key": "niieiuta"
}

Por eso Agregar(es opcional solo se usa para parsear los queryParams):

yarn add query-string

const query = queryString.parse( location.search );

{
    "asc": "123",
    "q": "batman"
}


*********************************
SECCION 15 : Protección de Rutas
*********************************

Temas:
-Rutas públicas
-Rutas privadas
-Login y logout - Sin backend aún
-Recordar cuál fue la última ruta visitada para mejorar la experiencia de usuario.
-Context
-Reducer

********

Se creó la carpeta /auth/context/ y sus respectivos componentes

Se añadió el AuthProvider en HeroesApp.jsx
ya que es un punto alto de la aplicación y tengo 
toda la información del context a lo largo de la aplicación

********

Login de usuario

Navbar.jsx:

Para mostrar el nombre del usuario logueado:
const { user } = useContext(AuthContext);
console.log(user);

{
    "id": "ABC",
    "name": "Julio Chacon"
}

Mostrar así con el ? :
{ user?.name }

********

Logout del usuario

AuthProvider.jsx

Se elimina la llave guardada en localStorage

const logout = () => {
    localStorage.removeItem('user');
    dispatch({
        type: types.logout
    });
}

Navbar.jsx
Se ejecuta el logout() expuesto desde el Context

const onLogout = () => {
    logout();
    navigate('/login', {
        replace: true
    });        
}

********

Rutas privadas

Se creó /router/PrivateRoute.jsx

Este componente valida si el usuario está logueado y retorna 
los componentes en children, de lo contrario envia a /login


En AppRouter se hizo este cambio:

<Route path="/*" element={
    <PrivateRoute>
        <HeroesRoutes />
    </PrivateRoute>
    }
/>

Este cambio consiste en poner el HeroesRoutes dentro del PrivateRoute
para ser evaluado. La prueba salió correcta.

La idea es que si el usuario no está logueado no debería acceder a otros paths.

********

Rutas públicas

Si el usuario está logueado y se escribe login en el path, se direcciona a marvel

AppRouter.jsx:

<Route path="/login" element={
    <PublicRoute>
      <LoginPage />
    </PublicRoute>
  }
/>

********

Recordar la última página visitada

PrivateRoute.jsx

const { pathname, search } = useLocation();
    
const lastPath = pathname + search;
localStorage.setItem('lastPath', lastPath);


LoginPage.jsx

Se valida si existe un lastPath sino retorna un / :

const lastPath = localStorage.getItem('lastPath') || '/';

Y en la función se envió a llamar:
navigate( lastPath, {
  replace: true
});


Con esto ya está recordando la última página.

***********************************************************
SECCION 17 : JournalApp - MaterialUI - Estructura y diseño
***********************************************************

Temas:

-Material UI
-Diferentes componentes de material
-Uso de funciones propias de MaterialUI
-Configuración de temas personalizados

********

yarn create vite
name: journal-app
rename: 08-journal-app
instalar dependencias con: yarn o yarn install

ejecutar el proyecto: yarn dev

-src
  -auth
  -journal
  -router
  -theme

Ejecutar: yarn add react-router-dom@6

En el main.jsx agregar el BrowserRouter:

<BrowserRouter>
    <JournalApp />
</BrowserRouter>

Comenzar con la definición de rutas:

/auth/routes/AuthRoutes.jsx
/journal/routes/JournalRoutes.jsx

En ambos archivos direcciono a componentes
Cuando defino el path /* es para rutas invalidas, usar con
Navigate para enviar a otra ruta

/router/AppRouter.jsx => El nivel más alto de rutas
Aquí defino que cualquier ruta que empiece con /auth o /journal
vaya por el route que corresponde

********

Instalar material ui

mui.com => get started => installation

Ejecutar para paquetes por default:
yarn add @mui/material @emotion/react @emotion/styled

Pegar en index.html la fuente de Roboto:

<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
/>


Ejecutar para tener iconos:
yarn add @mui/icons-material

********

Configuración de MUI con Vite

Se creó:
/theme/AppTheme.jsx => Se definió el higher order component que necesita MUI
/theme/purple.js => Se definió el objeto que actuará como tema

Agregar lo siguiente en JournalApp, no en el main para que no sea muy complejo:

return (
    <AppTheme>
        <AppRouter />
    </AppTheme>
)


JournalPage.jsx :

Es mejor importar especificamente el ícono para que demore menos en renderizar
y el Typography es para poder manipular ese objeto con propiedades de material ui
Poner sin llaves la import del icono.

import  MailOutline  from '@mui/icons-material/MailOutline'
import { Typography } from '@mui/material'
import React from 'react'

export const JournalPage = () => {
    return (
        <>
            <Typography>JournalPage</Typography>
            <MailOutline />

        </>
    )
}

********

Diseño del Login :: LoginPage.jsx

Se usan componente de ui como
Button, Grid, TextField

propiedades: 
xs(extra small): es para pantallas pequeñas
sm
md
xl
sx: pantallas grandes

fullwidth es para que tome todo el tamaño del padre

Se usó Link de material ui y de react-router-dom

********

Layout

Se usa porque los componentes son parecidos

AuthLayout.jsx
JournalLayout.jsx
    - Box es como un div
    - Drawer

Se aplicaron muchos componentes de material ui
explorar journal-app


*******************
SECCION 18 : REDUX
*******************

Temas:

- Redux
- Store
- Middlewares
- Dispatch
- Actions
- State
- Acciones asíncronas
- RTK Query
- Redux Toolkit
- Slices

********

Redux: Es como un context global del app. Sirve para react, angular, vue, etc

Partes de Redux:

Store: Envía state al View
View: Dispara un action
Dispatcher: Recibe el action y lo envía al Reducer
    - Si el action es async entra en acción el Middleware (ej: peticion api)
Reducer: Contiene todos los reducers, ejecuta la acción y retorna nuevo state

********

Redux, React Redux y RTK Query

Redux: es el patrón en el que se basa la creación de states mediante reducers
React Redux: React y Redux integración de ambos
Redux Toolkit: Hacer simple la integración
RTK Query: Para peticiones http


https://redux-toolkit.js.org/

Añadir extensión Redux DevTools a Chrome

Config inicial del proyecto:

yarn create vite
name: toolkit-redux
ejecutar yarn en el proyecto para instalar dependencias

yarn add @reduxjs/toolkit react-redux

********

Configurar store y slices

Se creó store/store.js

Para que el store se aplique a todo el app necesitamos ponerlo en el main.jsx

<Provider store={store}>
    <App />
 </Provider>

Slice: Una función que recibe un objeto :: /slices/counter/counterSlice.js
Aquí se definen las acciones o reducers que luego son importadas

No es necesario hacer ...state porque createSlice de toolkit ya lo hace por default

Para usar nuestro reducer modificamos el App.jsx y quitamos useState

Está fácil, se usa:
useSelector => para obtener el state que se definió en counterSlice.js
useDispatch => para llamar la acción 

En redux DevTools se ven los cambios del state de manera gráfica

Se hizo increment, decrement, incrementByAmount

********

Snippet y Gists de Slice

https://gist.github.com/Klerith/060281f76f3b7f0a458e4b83b1fc0062

import { createSlice } from '@reduxjs/toolkit';

export const templateSlice = createSlice({
    name: 'name',
    initialState: {
        counter: 10
    },
    reducers: {
        increment: (state, /* action */ ) => {
            //! https://react-redux.js.org/tutorials/quick-start
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.counter += 1;
        },
    }
});


// Action creators are generated for each case reducer function
export const { increment } = templateSlice.actions;

********

pokemonSlice

API para peticiones => pokeapi.co

PokemonApp.jsx
pokemonSlice.js

Agregar al store.js

Ya con esto aparece en devtools toda la info de los reducers

********

Thunks

Una accion async que dispara otra accion cuando se termina la async

thunks.js
La funcion se llama en el useEffect de PokemonApp.jsx

********

Axios

yarn add axios

Se creó src/api/pokemonApi.js
Y en thunks.js se completó el llamado con get()

********


********



********


********



********


